#! /usr/bin/env python

import os, sys, pickle, math
from pysqlite2 import dbapi2 as sqlite3

# Open the DB
dbfile = 'faces.db'
if len(sys.argv)>1:
    dbfile = sys.argv[1]
if not os.path.isfile(dbfile):
    print "No such file: {}".format(dbfile)
    sys.exit(1)
db = sqlite3.connect(dbfile)
cur = db.cursor()

# Set initial group to work on (my Picasa load produced 190 groups)
initgr = 190
if len(sys.argv)>2:
    initgr = int(sys.argv[2])

# Set grouping threshold
thresh = 0.3
if len(sys.argv)>3:
    thresh = float(sys.argv[3])

# Set write to DB flag
write = False
if len(sys.argv)>4:
    write = True

print "Grouping faces in {} from group {} at threshold {}, write to DB {}".format(dbfile, initgr, thresh, write)

# Load 'em in..
print "Loading face weights"
cur.execute('SELECT pickled from face_weights')
wgts = pickle.loads(cur.fetchone()[0])

groups = {}
maxgrp = 0
print "Loading Picasa groups and re-averaging.."
# skip group 0 - it's Picasa's bit bucket
cur.execute('SELECT grp, pickled from face_data where grp > 0 and grp < ?', (initgr,))
for row in cur:
    grp = int(row[0])
    enc = pickle.loads(row[1])
    if grp in groups:
        (cnt, avg) = groups[grp]
        cnt += 1.0
        for i in range(0,len(enc)):
            avg[i] = (cnt-1.0)/cnt*avg[i] + 1.0/cnt*enc[i]
        groups[grp] = (cnt, avg)
    else:
        groups[grp] = (1.0, enc)
    if grp > maxgrp:
        maxgrp = grp

print "Loading other face data and re-grouping.."
gfaces = {}
gstat = {}
tot = 0
mat = 0
new = 0
cur.execute('SELECT pickled, hash, top, left, bottom, right from face_data where grp >= ?', (initgr,))
for row in cur:
    enc = pickle.loads(row[0])
    key = (row[1],row[2],row[3],row[4],row[5])
    lgrp = None
    ldst = thresh
    for grp in groups:
        (cnt, avg) = groups[grp]
        vec = enc - avg
        dst = math.sqrt((wgts*vec*vec).sum())
        if dst < ldst:
            ldst = dst
            lgrp = grp
    if lgrp:
        cnt += 1.0
        for i in range(0,len(enc)):
            avg[i] = (cnt-1.0)/cnt*avg[i] + 1.0/cnt*enc[i]
        groups[grp] = (cnt, avg)
        mat += 1
    else:
        lgrp = maxgrp+1
        maxgrp = lgrp
        groups[lgrp] = (1.0, enc)
        new += 1
    tot += 1
    if (tot%100)==0:
        print "\tloaded {}, matched {}, new {} groups {}".format(tot, mat, new, len(groups))
    if lgrp in gstat:
        gstat[lgrp] = gstat[lgrp] + 1
    else:
        gstat[lgrp] = 1
    gfaces[key] = lgrp
print "Group match stats"
for grp in gstat:
    print "{}, {}".format(grp, gstat[grp])

if write:
    # Update groups with averaged face data
    print "DBWRITE: updating group averages.."
    for grp in groups:
        cur.execute('SELECT grp from face_groups where grp = ?', (grp,))
        row = cur.fetchone()
        if row:
            # We already have a group in the DB
            cur.execute('UPDATE face_groups set pickled = ? where grp = ?', (pickle.dumps(avg),grp))
        else:
            # New group, map to Unknown face label
            cur.execute('INSERT into face_groups (grp, pickled, label) values(?, ?, ?)', (grp, pickle.dumps(avg), '_Unknown_'))
    print "DBWRITE: updating face data.."
    for key in gfaces:
        data = (gfaces[key],) + key
        cur.execute('UPDATE face_data set grp = ? where hash = ? and top = ? and left = ? and bottom = ? and right = ?', data)
    db.commit()
db.close()

