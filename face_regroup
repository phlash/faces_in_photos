#! /usr/bin/env python

import os, sys, pickle, math
from pysqlite2 import dbapi2 as sqlite3

# Set initial database file name
dbfile = 'faces.db'
# Set initial grouping threshold
thresh = 0.45
# Set default write to DB flag
write = False
skip = False
cthresh = None
for arg in range(1,len(sys.argv)):
    if skip:
        skip = False
    elif sys.argv[arg].startswith('-h'):
        print "usage: face_regroup [-d <database def:faces.db>] [-t <threshold def:0.3>] [-w (write)]"
        sys.exit(0)
    elif sys.argv[arg].startswith('-d'):
        skip = True
        dbfile = sys.argv[arg+1]
    elif sys.argv[arg].startswith('-t'):
        skip = True
        cthresh = float(sys.argv[arg+1])
    elif sys.argv[arg].startswith('-w'):
        write = True

# Open the DB
if not os.path.isfile(dbfile):
    print "No such file: {}".format(dbfile)
    sys.exit(1)
db = sqlite3.connect(dbfile)
cur = db.cursor()
cur.execute('PRAGMA foreign_keys = ON')

# Read relevant settings
cur.execute('SELECT key,value from face_scanner_config')
for row in cur:
    if ('threshold' == row[0]):
        thresh = float(row[1])

# Command line takes precedence
if cthresh != None:
    thresh = cthresh

print "Grouping non-Picasa faces in {} at threshold {}, write to DB {}".format(dbfile, thresh, write)

# Load 'em in..
print "Loading face weights"
cur.execute('SELECT pickled from face_weights')
wgts = pickle.loads(cur.fetchone()[0])

groups = {}
maxgrp = 0
print "Loading Picasa groups and re-averaging.."
# skip group 0 - it's Picasa's bit bucket
cur.execute('SELECT grp, pickled from face_data where grp > 0 and inpic = 1')
for row in cur:
    grp = int(row[0])
    enc = pickle.loads(row[1])
    if grp in groups:
        (cnt, avg) = groups[grp]
        cnt += 1.0
        for i in range(0,len(enc)):
            avg[i] = (cnt-1.0)/cnt*avg[i] + 1.0/cnt*enc[i]
        groups[grp] = (cnt, avg)
    else:
        groups[grp] = (1.0, enc)
    if grp > maxgrp:
        maxgrp = grp

print "Loading other face data and re-grouping.."
picgrp = maxgrp
gfaces = {}
gstat = {}
tot = 0
mat = 0
new = 0
# include group 0, we might match them elsewhere..
cur.execute('SELECT pickled, hash, top, left, bottom, right from face_data where (grp=0) or inpic = 0')
for row in cur:
    enc = pickle.loads(row[0])
    key = (row[1],row[2],row[3],row[4],row[5])
    lgrp = None
    ldst = thresh
    for grp in groups:
        (cnt, avg) = groups[grp]
        vec = enc - avg
        dst = math.sqrt((wgts*vec*vec).sum())
        if dst < ldst:
            ldst = dst
            lgrp = grp
    if lgrp:
        cnt += 1.0
        for i in range(0,len(enc)):
            avg[i] = (cnt-1.0)/cnt*avg[i] + 1.0/cnt*enc[i]
        groups[grp] = (cnt, avg)
        mat += 1
    else:
        lgrp = maxgrp+1
        maxgrp = lgrp
        groups[lgrp] = (1.0, enc)
        new += 1
    tot += 1
    if (tot%100)==0:
        print "\tloaded {}, matched {}, new {} groups {}".format(tot, mat, new, len(groups))
    if lgrp in gstat:
        gstat[lgrp] = gstat[lgrp] + 1
    else:
        gstat[lgrp] = 1
    gfaces[key] = lgrp

if write:
    # Nuke existing relationships
    print "DBWRITE: clearing existing groupings.."
    regroup = '_REGROUP_'
    cur.execute('INSERT OR IGNORE INTO face_labels (label) values (?)', (regroup,))
    cur.execute('INSERT OR IGNORE INTO face_groups (grp,label,pickled) values(?,?,?)', (-1,regroup,''))
    cur.execute('UPDATE face_data set grp = -1 where inpic = 0')
    cur.execute('DELETE FROM face_groups where grp > ?', (picgrp,))
    db.commit()
    # Update groups with averaged face data
    print "DBWRITE: updating group averages.."
    for grp in groups:
        (cnt, avg) = groups[grp]
        cur.execute('SELECT grp from face_groups where grp = ?', (grp,))
        row = cur.fetchone()
        if row:
            # We already have a group in the DB
            cur.execute('UPDATE face_groups set pickled = ? where grp = ?', (pickle.dumps(avg),grp))
        else:
            # New group, map to Unknown face label
            cur.execute('INSERT into face_groups (grp, pickled, label) values(?, ?, ?)', (grp, pickle.dumps(avg), '_unknown_'))
    print "DBWRITE: updating face data.."
    for key in gfaces:
        data = (gfaces[key],) + key
        cur.execute('UPDATE face_data set grp = ? where hash = ? and top = ? and left = ? and bottom = ? and right = ?', data)
    print "DBWRITE: tidying up temporary label.."
    cur.execute('DELETE FROM face_groups where grp = -1')
    cur.execute('DELETE FROM face_labels where label = ?', (regroup,))
    print "DBWRITE: updating threshold.."
    cur.execute('INSERT OR IGNORE INTO face_scanner_config(key,value) values(?,?)', ('threshold',str(thresh),))
    cur.execute('UPDATE face_scanner_config set value=? WHERE key=?', (str(thresh),'threshold',))
    db.commit()
db.close()

