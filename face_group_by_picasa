#! /usr/bin/env python

import os, sys, pickle, math
import numpy
from pysqlite2 import dbapi2 as sqlite3

# Face compare threshold
thresh = 0.3

# Open the DB
dbfile = 'faces.db'
if len(sys.argv)>1:
    dbfile = sys.argv[1]
if not os.path.isfile(dbfile):
    print "No such file: {}".format(dbfile)
    sys.exit(1)
db = sqlite3.connect(dbfile)
cur = db.cursor()

# Adjust threshold
if len(sys.argv)>2:
    thresh = float(sys.argv[2])

# Load the picasa tagged faces and average each group
groups = {}
print "loading picasa groups and averaging faces.."
rct = 0
cur.execute('SELECT t.human, g.pickled from tag_groups as t, groups as g where t.grow = g._rowid_')
for row in cur:
    rct += 1
    hum = row[0]
    enc = pickle.loads(row[1])
    if not hum in groups:
        groups[hum] = (1.0,enc)
    else:
        (cnt,avg) = groups[hum]
        for i in range(0,len(enc)):
            avg[i] = (cnt-1)/cnt * avg[i] + 1/cnt * enc[i]
        cnt += 1.0
        groups[hum] = (cnt,avg)

print "{} distinct humans from {} faces".format(len(groups),rct)

# Load all other faces, measure the weighted distance from average faces and estimate human
print "testing other faces..."
tot = 0
rct = 0
cur.execute('SELECT pickled from weights')
w = pickle.loads(cur.fetchone()[0])
cur.execute('SELECT pickled, path, left, top, right, bottom from groups where _rowid_ not in (select distinct(grow) from tag_groups)')
for row in cur:
    fnd = 0
    rct += 1
    enc = pickle.loads(row[0])
    lhum = None
    ldis = thresh
    for hum in groups:
        (cnt,avg) = groups[hum]
        # Stolen from: https://stackoverflow.com/questions/8860850/euclidean-distance-with-weights
        d = enc-avg
        dist = math.sqrt((w*d*d).sum())
        if dist < thresh:
            fnd += 1
            print "possible face({}:{}): {} in {}@{},{},{},{}".format(fnd,dist,hum,row[1],row[2],row[3],row[4],row[5])
            if dist < ldis:
                ldis = dist
                lhum = hum
    if fnd > 0:
        tot += 1
        print "most likely face({}): {} in {}@{},{},{},{}".format(ldis,lhum,row[1],row[2],row[3],row[4],row[5])

print "Found {} possible new faces from {}".format(tot,rct)
db.close()
