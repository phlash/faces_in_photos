#!/usr/bin/python

# -*- coding: utf-8 -*-
import re
import os
import sys
import numpy
#import Tkinter
from PIL import Image, ExifTags #, ImageDraw, ImageTk
import face_recognition

#def button_click_exit_mainloop (event):
#    event.widget.quit() # this will cause mainloop to unblock.

#root = Tkinter.Tk()
#root.bind("<Button>", button_click_exit_mainloop)
#root.geometry('+%d+%d' % (100,100))
dirlist = os.listdir('.')
old_label_image = None
for f in dirlist:
    try:
        # Load as image data
        print("{}: loading...".format(f))
        pil1 = Image.open(f)
        try:
            exif = dict(pil1._getexif().items())
            print("{}: orientation {}".format(f, exif[274]))
            if exif[274] == 3:
                pil1 = pil1.rotate(180, expand=True)
            elif exif[274] == 6:
                pil1 = pil1.rotate(270, expand=True)
            elif exif[274] == 8:
                pil1 = pil1.rotate(90, expand=True)
        except (AttributeError, KeyError, IndexError), e:
            print("{}: exif issue {}".format(f,e))
            pass
        # Resize to sane size for processing, preserve aspect ratio
        scale = 600.0 / pil1.height
        pil2 = pil1.resize(((int)(scale * pil1.width), (int)(scale * pil1.height)))
        # Convert to numpy array for face_recognition
        image1 = numpy.array(pil2)
        #image1 = face_recognition.load_image_file(f)
        print("{}: searching...".format(f))
        # Use HOG engine for speed, upsample twice to find smaller faces
        faces = face_recognition.face_locations(image1, number_of_times_to_upsample=2, model="hog")
        print("{}: HOG found {} face(s)".format(f, len(faces)))
        # Now try CNN engine for accuracy, no upsampling, if nothing found by HOG
        if 0 == len(faces):
            faces = face_recognition.face_locations(image1, number_of_times_to_upsample=0, model="cnn")
            print("{}: CNN found {} face(s)".format(f, len(faces)))
        #draw = ImageDraw.Draw(pil2)
        for loc in faces:
            (top, right, bottom, left) = loc
        #    draw.rectangle(((left, top),(right, bottom)), outline=(255,0,0))
            print("{}: face @ {},{},{},{}".format(f, (int)(left/scale),(int)(top/scale),(int)(right/scale),(int)(bottom/scale)))
        #del draw
        #root.geometry('%dx%d' % (pil2.size[0],pil2.size[1]))
        #tkpi = ImageTk.PhotoImage(pil2)
        #label_image = Tkinter.Label(root, image=tkpi)
        #label_image.place(x=0,y=0,width=pil2.size[0],height=pil2.size[1])
        #root.title(f)
        #if old_label_image is not None:
        #    old_label_image.destroy()
        #old_label_image = label_image
        #root.mainloop() # wait until user clicks the window
    except Exception, e:
        # This is used to skip anything not an image.
        # Image.open will generate an exception if it cannot open a file.
        # Warning, this will hide other errors as well.
        print("{}: processing issue {}".format(f,e))
        pass
